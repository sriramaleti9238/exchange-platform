version: '3.8'

services:
  db:
    image: exchange/db
    build:
      context: backend-internal
      dockerfile: Dockerfile-postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=exchange
    healthcheck:
      test: [ "CMD-SHELL", "test $(psql -U postgres -d exchange -c 'SELECT count(id) FROM exchange.user' -t) -gt 0 || exit 1" ]
      interval: 10s
      retries: 20
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "input-record:1:1"

  backend-internal:
    image: exchange/image-internal
    build:
      context: backend-internal
      dockerfile: Dockerfile-backend-internal
    environment:
      - DB_ADDRESS=db
      - DB_PORT=5432
      - DB_NAME=exchange
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - SPRING_KAFKA_TOPIC=input-record
      - SPRING_KAFKA_CONSUMER_GROUP=backend-internal
    ports:
      - 8070:8070
    depends_on:
      - kafka
      - db

  backend-external:
    image: exchange/image-external
    build:
      context: backend-external
      dockerfile: Dockerfile-backend-external
    ports:
      - 8080:8080
    depends_on:
      - kafka
      - db
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092  # Kafka server address
      SPRING_KAFKA_TOPIC: input-record  # Topic name to connect to

#  frontend-client:
#    image: exchange/frontend-client
#    build:
#      context: frontend-client
#      dockerfile: Dockerfile-frontend-client